/* Generated By:JavaCC: Do not edit this line. JJTMyPascalState.java Version 5.0 */
public class JJTMyPascalState {
  private java.util.List<Node> nodes;
  private java.util.List<Integer> marks;

  private int sp;        // número de nós na pilha
  private int mk;        // marca atual
  private boolean node_created;

  public JJTMyPascalState() {
    nodes = new java.util.ArrayList<Node>();
    marks = new java.util.ArrayList<Integer>();
    sp = 0;
    mk = 0;
  }

  /* Determina se o nó atual foi realmente fechado e empurrado(push). 
   */
  public boolean nodeCreated() {
    return node_created;
  }

  /* Chame isso para reinicializar a pilha de nós. É chamado
     automaticamente pelo método ReInit () do analisador. */
  public void reset() {
    nodes.clear();
    marks.clear();
    sp = 0;
    mk = 0;
  }

  /*Retorna o nó raiz do AST. Só faz sentido ligar
     isso após uma análise bem-sucedida. */
  public Node rootNode() {
    return nodes.get(0);
  }

  /* Coloca um nó na pilha. */
  public void pushNode(Node n) {
    nodes.add(n);
    ++sp;
  }

  /* Retorna o nó no topo da pilha e o remove da pilha.  */
  public Node popNode() {
    if (--sp < mk) {
      mk = marks.remove(marks.size()-1);
    }
    return nodes.remove(nodes.size()-1);
  }

  /* Retorna o nó atualmente no topo da pilha. */
  public Node peekNode() {
    return nodes.get(nodes.size()-1);
  }

  /* Retorna o número de filhos na pilha no nó atual escopo. */
  public int nodeArity() {
    return sp - mk;
  }


  public void clearNodeScope(Node n) {
    while (sp > mk) {
      popNode();
    }
    mk = marks.remove(marks.size()-1);
  }


  public void openNodeScope(Node n) {
    marks.add(mk);
    mk = sp;
    n.jjtOpen();
  }


  /* Um nó definido é construído a partir de um número especificado de
     filhos. Esse número de nós é retirado da pilha e
     faz os filhos do nó definido. 
	 Então, o nó definitivo
     é colocado na pilha. */
  public void closeNodeScope(Node n, int num) {
    mk = marks.remove(marks.size()-1);
    while (num-- > 0) {
      Node c = popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c, num);
    }
    n.jjtClose();
    pushNode(n);
    node_created = true;
  }


  /* Um nó condicional é construído se sua condição for verdadeira. Todos
     os nós que foram enviados desde que o nó foi aberto são
     tornados filho do nó condicional, que é então empilhado
     na pilha. Se a condição for falsa, o nó não é
     construídos e eles são deixados na pilha. */
  public void closeNodeScope(Node n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = marks.remove(marks.size()-1);
      while (a-- > 0) {
        Node c = popNode();
        c.jjtSetParent(n);
        n.jjtAddChild(c, a);
      }
      n.jjtClose();
      pushNode(n);
      node_created = true;
    } else {
      mk = marks.remove(marks.size()-1);
      node_created = false;
    }
  }
}
/* JavaCC - OriginalChecksum=c022ef70c8a9ae1f50ac3f097a12e3be (do not edit this line) */
