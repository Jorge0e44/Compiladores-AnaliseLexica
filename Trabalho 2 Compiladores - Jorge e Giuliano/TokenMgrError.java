/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 5.0 */
/* JavaCCOptions: */
/** Token Manager Error. */
public class TokenMgrError extends Error
{

  /**
   * O identificador de versão para esta classe serializável.
   * Incrementar apenas se a forma <i> serializada </i> do
   * mudanças de classe.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Ocorreu um erro léxico.
   */
  static final int LEXICAL_ERROR = 0;

  /**
   * Foi feita uma tentativa de criar uma segunda instância de um gerenciador de token estático.
   */
  static final int STATIC_LEXER_ERROR = 1;

  /**
   * Mudou para um estado léxico inválido.
   */
  static final int INVALID_LEXICAL_STATE = 2;

  /**
   * Detectou (e saiu de) um loop infinito no gerenciador de tokens.
   */
  static final int LOOP_DETECTED = 3;

  /**
   * Indica o motivo pelo qual a exceção é lançada. Terá
   * um dos 4 valores acima.
   */
  int errorCode;

  /**
   * Substitui caracteres não imprimíveis por seu escape(ou escape Unicode)
   * equivalentes na string dada
   */
  protected static final String addEscapes(String str) {
    StringBuffer retval = new StringBuffer();
    char ch;
    for (int i = 0; i < str.length(); i++) {
      switch (str.charAt(i))
      {
        case 0 :
          continue;
        case '\b':
          retval.append("\\b");
          continue;
        case '\t':
          retval.append("\\t");
          continue;
        case '\n':
          retval.append("\\n");
          continue;
        case '\f':
          retval.append("\\f");
          continue;
        case '\r':
          retval.append("\\r");
          continue;
        case '\"':
          retval.append("\\\"");
          continue;
        case '\'':
          retval.append("\\\'");
          continue;
        case '\\':
          retval.append("\\\\");
          continue;
        default:
          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
            String s = "0000" + Integer.toString(ch, 16);
            retval.append("\\u" + s.substring(s.length() - 4, s.length()));
          } else {
            retval.append(ch);
          }
          continue;
      }
    }
    return retval.toString();
  }

  /**
   * Retorna uma mensagem detalhada para o erro quando ele é lançado pelo
   * gerenciador de tokens para indicar um erro léxico.
   * Parâmetros:
   * EOFSeen: indica se EOF causou o erro léxico
   * curLexState: estado léxico em que este erro ocorreu
   * errorLine: número da linha quando o erro ocorreu
   * errorColumn: número da coluna quando o erro ocorreu
   * errorAfter: prefixo que foi visto antes de este erro ocorrer
   * curchar: o personagem ofensivo
   * Nota: Você pode personalizar a mensagem de erro lexical modificando este método.
   */
  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
    return("Erro lexico na linha" +
          errorLine + ", coluna" +
          errorColumn + ".  Encontrado: " +
          (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
          "depois : \"" + addEscapes(errorAfter) + "\"");
  }

  /**
   * Mensagens de erro.
   */
  public String getMessage() {
    return super.getMessage();
  }

  /*
   * Construtores
   */

  /** Construtor sem argumentos */
  public TokenMgrError() {
  }

  /** Construtor com parametros */
  public TokenMgrError(String message, int reason) {
    super(message);
    errorCode = reason;
  }

  /** Construtor completo. */
  public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
  }
}
/* JavaCC - OriginalChecksum=f617b0103aabf7650bc48f1badde308c (do not edit this line) */
